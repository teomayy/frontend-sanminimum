import { ICreateReportDto, IReport } from '@/types/report.types'

import { axiosWithAuth } from '@/api/interceptors'

interface IReportFilters {
	doctorId?: string
	startDate?: string
	endDate?: string
	isDeleted?: boolean
}

class ReportService {
	private BASE_URL = '/reports'

	async createReport(data: ICreateReportDto): Promise<IReport> {
		try {
			const response = await axiosWithAuth.post<IReport>(this.BASE_URL, data)
			return response.data
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞:', error)
			throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç')
		}
	}

	async updateReport(
		id: string,
		data: Partial<ICreateReportDto>
	): Promise<IReport> {
		try {
			const response = await axiosWithAuth.put<IReport>(
				`${this.BASE_URL}/${id}`,
				data
			)
			return response.data
		} catch (error) {
			console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ —Å ID ${id}:`, error)
			throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç')
		}
	}

	async deleteReport(id: string): Promise<void> {
		try {
			await axiosWithAuth.delete(`${this.BASE_URL}/${id}`)
		} catch (error) {
			console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ —Å ID ${id}:`, error)
			throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ç—á–µ—Ç')
		}
	}

	async getReportsByDoctor(isDeleted?: boolean): Promise<IReport[]> {
		try {
			const response = await axiosWithAuth.get<IReport[]>(this.BASE_URL, {
				params: isDeleted !== undefined ? { isDeleted } : {}
			})
			console.log('asas', response.data)
			return response.data
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –≤—Ä–∞—á–∞:', error)
			throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç—ã')
		}
	}

	async getAllReports(): Promise<IReport[]> {
		try {
			const response = await axiosWithAuth.get<IReport[]>(
				`${this.BASE_URL}/all`
			)
			return response.data
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤:', error)
			throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç—á–µ—Ç—ã')
		}
	}

	async getReportById(id: string): Promise<IReport> {
		try {
			const response = await axiosWithAuth.get<IReport>(
				`${this.BASE_URL}/${id}`
			)
			return response.data
		} catch (error) {
			console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ —Å ID ${id}:`, error)
			throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç')
		}
	}

	// üìå **–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞**
	async archiveReport(id: string): Promise<void> {
		try {
			await axiosWithAuth.patch(`${this.BASE_URL}/${id}/archive`)
		} catch (error) {
			console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ —Å ID ${id}:`, error)
			throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç')
		}
	}

	// üìå **–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∏–∑ –∞—Ä—Ö–∏–≤–∞**
	async restoreReport(id: string): Promise<void> {
		try {
			await axiosWithAuth.patch(`${this.BASE_URL}/${id}/restore`)
		} catch (error) {
			console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ —Å ID ${id}:`, error)
			throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç')
		}
	}
}

export const reportService = new ReportService()
